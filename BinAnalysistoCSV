import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
import csv 

temp = pd.read_csv('keplerstellar.csv') #insert real path
temp = temp.dropna().sort_values(by=['teff']) #Table sorted by Teff least to greatest
data = list(temp['teff']) 

binTempArr = [data[0]]

def histo(minTempDifference,minNumIndicies):
    lastTemp = 0
    numIndicies = 0
    for i in range(0,len(data)): #makes sure each bin is at least 100 Teff wide, and each bin has at least 100 points
        numIndicies += 1
        if data[i] - lastTemp >= minTempDifference and numIndicies >= minNumIndicies:
            lastTemp = data[i]
            binTempArr.append(lastTemp)
            numIndicies = 0

    plt.hist(data, edgecolor='white', bins=binTempArr) #plots histogram with custom bins
    plt.xlabel("Temperature of Star (K)")
    plt.ylabel("Frequency")
    plt.title("Temperatures of Stars from the Kepler Dataset")
    plt.show() 

histo(100,100)


#This script will start with the inner/outer range of temperature bin and it will find transit time. depth, 
#and orbital period
import random
import math
#Inner orbital radius
def roi(temp):
    return (0.62817*temp**3)-(1235.15*temp**2)
#Outer orbital radius
def roo(temp):
    return (1.52*temp**3)-(2988.75*temp**2)

def starRadius(temp):
    return (temp*1.8395*10**5)-3.6169*10**8

def starMass(temp):
    return (2.85187*10**22*temp**2)+(3.70772*10**26*temp)-9.76855*10**29

def transitTime(starRadius,randOrbital,starMass):
    return (2*starRadius*math.sqrt((randOrbital*10**11)/(starMass*6.67)))

def transitDepth(planetRadius,starRadius):
    return (planetRadius**2)/(starRadius**2)

def orbitalPeriod(randOrbital,starMass):
    return (2*math.pi*randOrbital**1.5)*math.sqrt((randOrbital*10^11)/(starMass*6.67))

#Outputs an array of the frequencies of a bin with inner and outer temperature
def frequency(low,high):
    count=0
    for temp in data:
        if temp<=high and temp>=low:
            count=count+1
    return count

#calcualtes mean temperature of a bin
def meanTemp(inner,outer):
    Sum=0
    count=0
    for temp in data:
        if temp<outer and temp>inner:
            Sum=Sum+temp
            count=count+1
    mid=Sum/count
    return mid
    

def BinAnalysis(inTemp,outTemp,binnum):
    midTemp=(inTemp+outTemp)/2

    #Setting variables with the average temperature of the bin

    roi2=roi(midTemp)
    roo2=roo(midTemp)
    randOrbital=random.randint(int(roi2),int(roo2))
    planetRadius=random.randint(3390*10**3,11467*10**3)
    starRadius2=starRadius(midTemp)
    starMass2=starMass(midTemp)

    #Calculating transit time, depth, and orbital period

    transitTime2=transitTime(starRadius2,randOrbital,starMass2)
    transitDepth2=transitDepth(planetRadius,starRadius2)
    orbitalPeriod2=orbitalPeriod(randOrbital,starMass2)
    
    #frequency
    freq=frequency(inTemp,outTemp)
    
    #mean Temperature
    middle=meanTemp(inTemp,outTemp)
    
    Analysis=np.array([binnum,inTemp,outTemp,middle,freq,randOrbital,starMass2,planetRadius,starRadius2,transitTime2,transitDepth2,orbitalPeriod2])
    return Analysis


#Implementation of analysis function and creation of csv

multiarray=[]
labels=np.array(["Bin #","MinTemp","MaxTemp","Mean Temperature","Frequency","OrbitalRadius","StarMass","PlanetRadius","StarRadius","TransitTime","TransitDepth","OrbitalPeriod"])
multiarray.append(labels)
num=len(binTempArr)
for upper in range(1,num):
    u=binTempArr[upper]
    lower=binTempArr[upper-1]
    a=BinAnalysis(lower,u,upper)
    multiarray.append(a)
multiarray=np.array(multiarray)
#multiarray=np.around(multiarray,decimals=0)

with open("BinAnalysis.csv", "w") as f:
    writer = csv.writer(f)
    writer.writerows(multiarray)
